import random 
from colorama import Fore 
from art import *

class Hangman:

    def __init__(self, word_list, num_lives = 5):
        self.word               = random.choice(word_list)
        self.word_guessed       = ['_'] * len(self.word) 
        self.num_letters        = len(set(self.word))
        self.num_lives          = num_lives 
        self.word_list          = word_list
        self.list_of_guesses    = [] 
        print(Fore.LIGHTBLUE_EX + f'The mistery word has {self.num_letters} characters - {self.word_guessed}' + Fore.RESET)

    def hangman_visual(self):
        '''
    The hangman_visual method provides visuals of hangman at different stages as the number of lives of the player reduces. 

        '''
        hangman_lives = [

                """
        ________
        ¦     ¦
        ¦     O
        ¦    \¦/
        ¦     ¦
        ¦    / \ 
        ¦
        ¦
        ¦___________

        """,

                """
        ________
        ¦     ¦
        ¦     O
        ¦    \¦/
        ¦     ¦
        ¦    / 
        ¦
        ¦
        ¦___________

        """ ,

            """
        ________
        ¦     ¦
        ¦     O
        ¦    \¦/
        ¦     
        ¦     
        ¦
        ¦
        ¦___________

        """ ,

            """
        ________
        ¦     ¦
        ¦     O
        ¦    \¦
        ¦     
        ¦     
        ¦
        ¦
        ¦___________

        """ , 

            """
        ________
        ¦     ¦
        ¦     O
        ¦    
        ¦     
        ¦     
        ¦
        ¦
        ¦___________

        """
        ]
        print(Fore.LIGHTMAGENTA_EX + hangman_lives[self.num_lives] + Fore.RESET)


    def check_guess(self, guess):
        '''
        The checks if the guessed letter is in the word.

        Parameters
        ----------
        word_list : str
            The letter guessed by the player

        Attributes
        ---------- 
        num_lives       : int
            Number of lives a player has. The number of lives reduces each time the letter is guessed wrong.
        word            : str
            Random word generated by the computer from the word_list
        word_guessed    : list
            Consists of underscores '_' as the elements. The number of underscores is equal to the length of unique 
            letters in the 'word' attribute. Replaces the '_' with the letter everytime the letter is guessed correctly.
        num_letters     : int
            Length of unique letters in the 'word' attribute.
            The number is reduced each time the letter is guessed correctly.
        list_of_guesses : list
            List of unique letters that have been guessed by the player. Appends a letter everytime a new letter is guessed.
        '''
        if guess in self.word:
            print(Fore.LIGHTGREEN_EX + f'Good guess! {guess} is in the word.')
            for index, letter in enumerate(self.word):
                if guess == letter:  
                    self.word_guessed[index] = guess
            self.num_letters -= 1
            print(self.word_guessed)
            print(Fore.RESET)
        else:
            self.num_lives -= 1
            print(Fore.MAGENTA + f'Sorry, {guess} is not in the word.')
            print(f'You have {self.num_lives} lives left.' + Fore.RESET)
            self.hangman_visual()
        self.list_of_guesses.append(guess)

    def ask_for_input(self):
        
        """
        Asks user to guess the letter and checks if the entered character is a single alphabet 
        and if the letter is already guessed.
        
        """
        while True:
            guess = input(Fore.LIGHTCYAN_EX + 'Please enter a single letter here: ' + Fore.RESET)
            guess = guess.lower()
            if len(guess) != 1 or guess.isalpha() == False:
                print("Invalid letter. Please, enter a single alphabetical character.")
            elif guess in self.list_of_guesses:
                print("You already tried that letter!")
            else:
                self.check_guess(guess)
                break

def play_game(word_list):
    '''
        Main function to play the game based on number of lives
        - If the number of lives is equal to 0 then player loses the game.
        - If the number of lives are greater than 0 then the game continues.
        - If all the letter are guessed then the player wins.

        Parameters
        ----------
        word_list : list
            The word_list is list of words where one of the word chosen randomly by the computer will be guessed by the player

        '''
    
    num_lives = 5
    game = Hangman(word_list, num_lives)
    print(Fore.LIGHTBLUE_EX + 'Welcome to \n\n')
    tprint("HANGMAN","rand-large")
    print(Fore.LIGHTCYAN_EX + 'You need to guess the word correctly to win this game')
    print('You have 5 lives. Each time you guess the letter wrong you will lose one life')
    print(Fore.CYAN + f'Lets Begin... !!\n\n' + Fore.RESET)
    while True:
        if game.num_lives == 0:
            print(Fore.RED + 'You lost!' + Fore.RESET)
            print(Fore.LIGHTCYAN_EX + f'The word is {game.word}\n\n' + Fore.RESET)
            break
        else:
            game.ask_for_input()
            if game.num_letters == 0:
                print(Fore.GREEN + f'You guessed the word right \'{game.word}\' ')
                print(Fore.LIGHTGREEN_EX + 'Congratulations. You won the game!' + Fore.RESET)
                break



word_list = ['apple', 'apricot', 'avocado', 'banana','blueberry', 'blackberry','cherry',  'cranberry', 'date',
             'dragonfruit', 'gooseberry', 'grapefruit', 'grape','guava', 'jackfruit','kiwi', 'lychee', 'lemon',
             'mangosteen', 'muskmelon', 'mango', 'orange', 'pineapple', 'pear', 'pomegranate', 'papaya', 
             'passionfruit', 'peach','pineberry', 'raspberry', 'rambutan','strawberry', 'tangerine','watermelon']

if __name__ == "__main__":
    play_game(word_list)